-- Create enum types
CREATE TYPE event_type AS ENUM ('maintenance', 'inspection', 'insurance', 'tax', 'other');
CREATE TYPE event_status AS ENUM ('scheduled', 'completed', 'cancelled');
CREATE TYPE recurrence_type AS ENUM ('none', 'daily', 'weekly', 'monthly', 'yearly');

-- Create maintenance_events table
CREATE TABLE maintenance_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    car_id BIGINT REFERENCES cars(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    event_type event_type NOT NULL DEFAULT 'maintenance',
    start_date DATE NOT NULL,
    end_date DATE,
    status event_status NOT NULL DEFAULT 'scheduled',
    recurrence_type recurrence_type NOT NULL DEFAULT 'none',
    recurrence_interval INTEGER,
    recurrence_end_date DATE,
    parent_event_id BIGINT REFERENCES maintenance_events(id) ON DELETE CASCADE,
    notification_days_before INTEGER[] DEFAULT ARRAY[1, 7],
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create maintenance_notifications table
CREATE TABLE maintenance_notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_id BIGINT REFERENCES maintenance_events(id) ON DELETE CASCADE,
    notification_date DATE NOT NULL,
    sent_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_maintenance_events_user_id ON maintenance_events(user_id);
CREATE INDEX idx_maintenance_events_car_id ON maintenance_events(car_id);
CREATE INDEX idx_maintenance_events_start_date ON maintenance_events(start_date);
CREATE INDEX idx_maintenance_notifications_event_id ON maintenance_notifications(event_id);
CREATE INDEX idx_maintenance_notifications_notification_date ON maintenance_notifications(notification_date);

-- Add RLS policies
ALTER TABLE maintenance_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE maintenance_notifications ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies
CREATE POLICY "Users can view their own maintenance events"
    ON maintenance_events FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own maintenance events"
    ON maintenance_events FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own maintenance events"
    ON maintenance_events FOR UPDATE
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own maintenance events"
    ON maintenance_events FOR DELETE
    USING (auth.uid() = user_id);

-- Basic notification policies
CREATE POLICY "Users can view their own notifications"
    ON maintenance_notifications FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM maintenance_events
        WHERE maintenance_events.id = maintenance_notifications.event_id
        AND maintenance_events.user_id = auth.uid()
    ));
